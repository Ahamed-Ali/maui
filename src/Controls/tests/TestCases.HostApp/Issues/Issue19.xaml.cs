using System;
using System.IO;

namespace Maui.Controls.Sample.Issues
{
	[Issue(IssueTracker.Github, 19, "Android: Updating Image.Source with ImageSource.FromStream() is broken in Release builds", PlatformAffected.Android)]
	public partial class Issue19 : ContentPage
	{
		public Issue19()
		{
			InitializeComponent();
		}

		private void OnLoadImageClicked(object sender, EventArgs e)
		{
			try
			{
				StatusLabel.Text = "Loading image from stream...";

				// Test multiple scenarios that could trigger AndroidMarshalMethod issues:
				
				// 1. Create from embedded resource (similar to the PR #18 scenario)
				var assembly = GetType().Assembly;
				using var resourceStream = assembly.GetManifestResourceStream("Controls.TestCases.HostApp.red.png");
				
				if (resourceStream != null)
				{
					// This path specifically tests InputStreamAdapter handling in release builds
					var imageSource = ImageSource.FromStream(() => resourceStream);
					TestImage.Source = imageSource;
					StatusLabel.Text = "Image loaded from embedded resource stream";
				}
				else
				{
					// Fallback: Create a simple test image as Base64 encoded PNG  
					var imageBytes = Convert.FromBase64String(
						"iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAANNSURBVHic7doxAQAAAMKg9U9tCj8g
					);

					// Create an image source from the stream - this tests the general stream handling
					var imageSource = ImageSource.FromStream(() => new MemoryStream(imageBytes));
					TestImage.Source = imageSource;
					StatusLabel.Text = "Image loaded from memory stream (fallback)";
				}
			}
			catch (Exception ex)
			{
				StatusLabel.Text = $"Error loading image: {ex.Message}";
			}
		}
	}
}